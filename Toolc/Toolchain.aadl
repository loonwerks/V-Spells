package Toolchain
public
	with Vspells_Types;
	renames Vspells_Types::all;

    with TA1;
    with TA2;
    with TA3;
    
    system Toolchain
    	features
    		binary: in data port SRC;
    		target: out data port TARGET;
    end Toolchain;
    
    system implementation Toolchain.config_1
    	subcomponents
    		TA1: system TA1::TA1.Performer_A;
    		TA2: system TA2::TA2.Performer_A;
    		TA3: system TA3::TA3.Performer_A;
    	connections
    		c1: port binary -> TA1.src;
    		c2: port TA1.lifted -> TA2.lifted;
    		c3: port TA2.transformed -> TA3.transformed;
    		c4: port TA3.target -> target;
    	annex resolute {**
    		argue Toolchain_Correctness(this)
    	**};
    end Toolchain.config_1;
    
    system implementation Toolchain.config_2
    	subcomponents
    		TA1: system TA1::TA1.Performer_A;
    		TA2: system TA2::TA2.Performer_B;
    		TA3: system TA3::TA3.Performer_C;
    	annex resolute {**
    		argue Toolchain_Correctness(this)
    	**};
    end Toolchain.config_2;
    	
    annex resolute {**
    	
    	goal Toolchain_Correctness(configuration : component) <=
    		** "The toolchain " configuration " produces well-patched software" **
    		strategy VSpells_Workflow: "Argue by V-Spells workflow";
    		let TA1_Tool : component = ModelAccess.GetComponent("TA1");
    		let TA2_Tool : component = ModelAccess.GetComponent("TA2");
    		let TA3_Tool : component = ModelAccess.GetComponent("TA3");
    		Well_Lifted(TA1_Tool) and Property_Correctly_Implemented(TA2_Tool) and 
    		Well_Flattened(TA3_Tool) and Workflow_Order(TA1_Tool, TA2_Tool, TA3_Tool)
    		
    	goal Well_Lifted(tool : component) <=
    		** "The source is well-lifted" **
    		let file : string = Get_Evidence_File(tool);
    		FileAccess.fileExists(file) and 
    		has_property(tool, Vspells_Properties::Evidence_Regex) => StringLib.matches(FileAccess.getContents(file), property(tool, Vspells_Properties::Evidence_Regex))
			  		
    	goal Property_Correctly_Implemented(tool : component) <=
    		** "The new property is correctly implemented" **
    		let file : string = Get_Evidence_File(tool);
    		FileAccess.fileExists(file) and 
    		has_property(tool, Vspells_Properties::Evidence_Regex) => StringLib.matches(FileAccess.getContents(file), property(tool, Vspells_Properties::Evidence_Regex))
    		
    	goal Well_Flattened(tool : component) <=
    		** "The software is well-flattened" **
    		let file : string = Get_Evidence_File(tool);
    		FileAccess.fileExists(file) and 
    		has_property(tool, Vspells_Properties::Evidence_Regex) => StringLib.matches(FileAccess.getContents(file), property(tool, Vspells_Properties::Evidence_Regex))
    		
    	goal Workflow_Order(TA1_Tool : component, TA2_Tool : component, TA3_Tool : component) <=
    		** "Tools run in correct order" **
    		FileAccess.lastModified(Get_Evidence_File(TA1_Tool)) < FileAccess.lastModified(Get_Evidence_File(TA2_Tool)) and
    		FileAccess.lastModified(Get_Evidence_File(TA2_Tool)) < FileAccess.lastModified(Get_Evidence_File(TA3_Tool))
    		
    	Get_Evidence_File(tool : component) : string =
    		if has_property(tool, Vspells_Properties::Evidence_File) then 
    			property(tool, Vspells_Properties::Evidence_File)
    		else
    			""
    			
    **};
    
end Toolchain;
